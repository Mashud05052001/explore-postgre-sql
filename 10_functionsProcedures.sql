/*
    *   Procedural Approach:
1. Language Support: Supports procedural languages like PL/SQL, PL/Perl, PL/Python, etc.
2. Complex Logic: Allows for complex logic using control structures like loops, conditionals, and exception handling.
3. Variable Support: Supports variable declarations and manipulation.
4. Stored Procedures/Functions: Provides the ability to create stored procedures or functions.

    *   Non-Procedural Approach:
1. Declarative Queries: Focuses on writing declarative SQL queries to retrieve, insert, update, or delete data from the database.
2. Simplicity: Emphasizes simplicity by expressing operations in terms of what data is needed.
3. SQL Functions: Supports SQL functions, which are simple SQL statements that return a value or set of values.
4. Performance: Can sometimes offer better performance for simple operations due to the optimized query execution plans generated by the database engine.

Function => can  (return) or  (not return something) 
Procedure => cannot return anything
*/

SELECT count(*) from employees;

CREATE OR REPLACE FUNCTION emp_count()
RETURNS INT
LANGUAGE SQL
AS
$$
    SELECT count(*) from employees;
$$;


CREATE OR REPLACE FUNCTION delete_particular_employee(p_emp_id INT)
RETURNS void
LANGUAGE SQL
AS
$$
    DELETE FROM employees WHERE employee_id = p_emp_id
$$;


SELECT emp_count();
SELECT * FROM employees;
SELECT delete_particular_employee(4);


CREATE OR REPLACE PROCEDURE remove_fixed_employee()
LANGUAGE plpgsql
AS
$$
    DECLARE
        test_var INT;
    BEGIN
        SELECT employee_id INTO test_var FROM employees WHERE employee_id = 6;
        DELETE FROM employees WHERE employee_id = test_var;
    END
$$;

CALL remove_fixed_employee();

CREATE OR REPLACE PROCEDURE remove_particular_employee(p_emp_id INT)
LANGUAGE plpgsql
AS
$$
    DECLARE
        test_var INT;
    BEGIN
        SELECT employee_id INTO test_var FROM employees WHERE employee_id = p_emp_id;
        DELETE FROM employees WHERE employee_id = test_var;

        RAISE NOTICE 'Employee removed successfully';
    END
$$;

CALL remove_particular_employee(8);
SELECT * FROM employees

